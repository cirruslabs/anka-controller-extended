syntax = "proto3";

package org.cirruslabs.ci.services.auth;

option java_multiple_files = true;
option java_package = "org.cirruslabs.anka.controller.grpc";
option java_outer_classname = "ControllerProto";

import "google/protobuf/empty.proto";

service Controller {
  rpc StartVM (StartVMRequest) returns (StartVMResponse) {
  }
  rpc StopVM (StopVMRequest) returns (StopVMResponse) {
  }
  rpc ScheduleVM (ScheduleVMRequest) returns (ScheduleVMResponse) {
  }
  rpc VmStatus (VMStatusRequest) returns (VMStatusResponse) {
  }
  rpc BatchedVmStatus (BatchedVMStatusRequest) returns (BatchedVMStatusResponse) {
  }
  rpc GetStats (google.protobuf.Empty) returns (GetStatsResponse) {
  }
}

message StartVMRequest {
  string template = 1;
  string tag = 2;
  string vm_name = 3;
  string startup_script = 4;
}

message StartVMResponse {
  string vm_id = 1;
  string error_message = 2;
}

message ScheduleVMRequest {
  string template = 1;
  string tag = 2;
  string vm_name = 3;
  string startup_script = 4;
  int64 priority = 5;
}

message ScheduleVMResponse {
  string error_message = 1;
  int64 queue_number = 2;
  int64 queue_size = 3;
}

message StopVMRequest {
  oneof identifier {
    string vm_id = 1;
    string vm_name = 2;
  }
}

message StopVMResponse {
  bool success = 1;
  string error_message = 2;
}

message VMStatusRequest {
  oneof identifier {
    string vm_id = 1;
    string vm_name = 2;
  }
}

message VMStatusResponse {
  string status = 1;
  string error_message = 2;
}

message BatchedVMStatusRequest {
  repeated string vm_names = 1;
}

message BatchedVMStatusResponse {
  map<string, string> statuses = 1;
  string error_message = 2;
}

message GetStatsResponse {
  int64 instances_size = 1;
  int64 queue_size = 2;
  int64 active_nodes_size = 3;
  int64 offline_nodes_size = 4;
  map<string, int64> instance_count_by_statuses = 5;
  int64 remaining_capacity = 6;
}
